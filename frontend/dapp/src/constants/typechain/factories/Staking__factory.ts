/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type { Staking, StakingInterface } from "../Staking";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "staking_token_address",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "staker",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "stakingStartTimestamp",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "lastRewardWithdrawTimestamp",
            type: "uint256",
          },
        ],
        indexed: false,
        internalType: "struct Staking.Stake",
        name: "stake",
        type: "tuple",
      },
    ],
    name: "Staked",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "staker",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "withdrawTimestamp",
        type: "uint256",
      },
    ],
    name: "Withdrawn",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "stake",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "userToStake",
    outputs: [
      {
        internalType: "address",
        name: "staker",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "stakingStartTimestamp",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "lastRewardWithdrawTimestamp",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "withdrawRewards",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "withdrawTokens",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060405161092c38038061092c83398101604081905261002f91610059565b6001600081905580546001600160a01b0319166001600160a01b0392909216919091179055610089565b60006020828403121561006b57600080fd5b81516001600160a01b038116811461008257600080fd5b9392505050565b610894806100986000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80633355833a146100515780638d8f2adb146100c0578063a694fc3a146100ca578063c7b8981c146100dd575b600080fd5b61009261005f36600461075b565b600260208190526000918252604090912080546001820154928201546003909201546001600160a01b0390911692919084565b604080516001600160a01b039095168552602085019390935291830152606082015260800160405180910390f35b6100c86100e5565b005b6100c86100d836600461078b565b6102f0565b6100c86104a4565b33600090815260026020818152604092839020835160808101855281546001600160a01b03168152600182015492810183905292810154938301939093526003909201546060820152906101545760405162461bcd60e51b815260040161014b906107a4565b60405180910390fd5b6201518081604001514261016891906107e4565b116101c95760405162461bcd60e51b815260206004820152602b60248201527f596f752063616e20776974686472617720746f6b656e73206f6e6c792061667460448201526a657220323420686f75727360a81b606482015260840161014b565b6020810151600154825160405163a9059cbb60e01b81526001600160a01b0391821660048201526024810184905291169063a9059cbb90604401602060405180830381600087803b15801561021d57600080fd5b505af1158015610231573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061025591906107fb565b50600060208381018281523383526002808352604093849020865181546001600160a01b0319166001600160a01b039091169081178255925160018201558487015191810191909155606080870151600390920191909155835191825291810184905242928101929092527f92ccf450a286a957af52509bc1c9939d1a6a481783e142e41e2499f0bb66ebc691015b60405180910390a15050565b33600090815260026020526040902060010154156103455760405162461bcd60e51b8152602060048201526012602482015271165bdd48185b1c9958591e481cdd185ad95960721b604482015260640161014b565b6040805160808101825233808252602080830185815242848601818152606086019182526000858152600294859052879020865181546001600160a01b0319166001600160a01b0391821617825593516001808301919091559151948101949094559051600390930192909255905493516323b872dd60e01b81526004810192909252306024830152604482018590529192909116906323b872dd90606401602060405180830381600087803b1580156103fe57600080fd5b505af1158015610412573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061043691906107fb565b506040805160808082018352338083526020808401878152428587018181526060968701918252875194855291519284019290925251948201949094529251918301919091527f24bb1beba9a74a1b084f49cb0560a7a1add60b5bbc7df0ecbba07b1047a9804e91016102e4565b600260005414156104f75760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161014b565b600260008181553381526020828152604091829020825160808101845281546001600160a01b0316815260018201549281018390529381015492840192909252600390910154606083015261055e5760405162461bcd60e51b815260040161014b906107a4565b610e1081606001514261057191906107e4565b10156105d25760405162461bcd60e51b815260206004820152602a60248201527f596f752063616e20776974686472617720726577617264206f6e6c79206f6e6360448201526932903832b9103437bab960b11b606482015260840161014b565b6000610e108260600151426105e791906107e4565b6064600a85602001516105fa919061081d565b610604919061083c565b61060e919061081d565b610618919061083c565b60015460405163140e25ad60e31b8152600481018390529192506001600160a01b03169063a0712d6890602401600060405180830381600087803b15801561065f57600080fd5b505af1158015610673573d6000803e3d6000fd5b5050600154845160405163a9059cbb60e01b81526001600160a01b039182166004820152602481018690529116925063a9059cbb9150604401602060405180830381600087803b1580156106c657600080fd5b505af11580156106da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106fe91906107fb565b50504260608201908152336000908152600260208181526040808420865181546001600160a01b0319166001600160a01b039091161781559186015160018084019190915595015191810191909155915160039092019190915555565b60006020828403121561076d57600080fd5b81356001600160a01b038116811461078457600080fd5b9392505050565b60006020828403121561079d57600080fd5b5035919050565b60208082526010908201526f596f75206469646e2774207374616b6560801b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b6000828210156107f6576107f66107ce565b500390565b60006020828403121561080d57600080fd5b8151801515811461078457600080fd5b6000816000190483118215151615610837576108376107ce565b500290565b60008261085957634e487b7160e01b600052601260045260246000fd5b50049056fea2646970667358221220adff4c418a805bfb39ba16ca5a1d93c24179181ebbc5e1e062d4535f6f62f52164736f6c63430008090033";

type StakingConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: StakingConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Staking__factory extends ContractFactory {
  constructor(...args: StakingConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    staking_token_address: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Staking> {
    return super.deploy(
      staking_token_address,
      overrides || {}
    ) as Promise<Staking>;
  }
  override getDeployTransaction(
    staking_token_address: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(staking_token_address, overrides || {});
  }
  override attach(address: string): Staking {
    return super.attach(address) as Staking;
  }
  override connect(signer: Signer): Staking__factory {
    return super.connect(signer) as Staking__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): StakingInterface {
    return new utils.Interface(_abi) as StakingInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Staking {
    return new Contract(address, _abi, signerOrProvider) as Staking;
  }
}
